//
//  Shapes.swift
//  Colours
//
//  Created by Max Bucknell on 10/06/2019.
//  Copyright Â© 2019 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Shapes : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfPalette: UIImage?
        static var paletteTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawPalette(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 100, resizedFrame.height / 100)



        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.5)
        shadow.shadowOffset = CGSize(width: 0, height: 0)
        shadow.shadowBlurRadius = 3

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 50.36, y: 9.38))
        bezierPath.addCurve(to: CGPoint(x: 40.55, y: 14.33), controlPoint1: CGPoint(x: 46.34, y: 9.38), controlPoint2: CGPoint(x: 42.77, y: 11.33))
        bezierPath.addCurve(to: CGPoint(x: 38.16, y: 21.58), controlPoint1: CGPoint(x: 39.05, y: 16.36), controlPoint2: CGPoint(x: 38.16, y: 18.87))
        bezierPath.addCurve(to: CGPoint(x: 50.36, y: 33.78), controlPoint1: CGPoint(x: 38.16, y: 28.32), controlPoint2: CGPoint(x: 43.62, y: 33.78))
        bezierPath.addCurve(to: CGPoint(x: 62.56, y: 21.58), controlPoint1: CGPoint(x: 57.1, y: 33.78), controlPoint2: CGPoint(x: 62.56, y: 28.32))
        bezierPath.addCurve(to: CGPoint(x: 50.36, y: 9.38), controlPoint1: CGPoint(x: 62.56, y: 14.84), controlPoint2: CGPoint(x: 57.1, y: 9.38))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 95.5, y: 50.25))
        bezierPath.addCurve(to: CGPoint(x: 49.75, y: 96), controlPoint1: CGPoint(x: 95.5, y: 75.52), controlPoint2: CGPoint(x: 75.02, y: 96))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 50.25), controlPoint1: CGPoint(x: 24.48, y: 96), controlPoint2: CGPoint(x: 4, y: 75.52))
        bezierPath.addCurve(to: CGPoint(x: 19.59, y: 15.85), controlPoint1: CGPoint(x: 4, y: 36.54), controlPoint2: CGPoint(x: 10.03, y: 24.24))
        bezierPath.addCurve(to: CGPoint(x: 49.75, y: 4.5), controlPoint1: CGPoint(x: 27.64, y: 8.78), controlPoint2: CGPoint(x: 38.19, y: 4.5))
        bezierPath.addCurve(to: CGPoint(x: 95.5, y: 50.25), controlPoint1: CGPoint(x: 75.02, y: 4.5), controlPoint2: CGPoint(x: 95.5, y: 24.98))
        bezierPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        bezierPath.fill()
        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfPalette: UIImage {
        if Cache.imageOfPalette != nil {
            return Cache.imageOfPalette!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            Shapes.drawPalette()

        Cache.imageOfPalette = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPalette!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var paletteTargets: [AnyObject]! {
        get { return Cache.paletteTargets }
        set {
            Cache.paletteTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Shapes.imageOfPalette)
            }
        }
    }




    @objc(ShapesResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
